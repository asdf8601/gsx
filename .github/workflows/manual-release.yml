name: Manual Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run tests
        run: uv run pytest tests/ -v

      - name: Run linting
        run: uv run ruff check .

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Tag version: ${VERSION}"

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          echo "Updated pyproject.toml version to ${VERSION}"

      - name: Build package
        run: uv build

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG="## Changes\n\nFirst release"
          else
            CHANGELOG="## Changes since $PREV_TAG\n\n$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)"
          fi
          
          # Use delimiter to handle multiline content
          echo "CHANGELOG_CONTENT<<DELIMITER" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "DELIMITER" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}